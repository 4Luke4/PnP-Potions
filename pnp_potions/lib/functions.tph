////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//	General-purpose functions
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

/**
* Converts any decimal number into a hexadecimal number
*/
DEFINE_DIMORPHIC_FUNCTION "TO_HEX_NUMBER"
INT_VAR
	"value"     = 0   // the decimal number
	"minDigits" = 1   // min. number of digits in return value (not counting sign)
	"prefix"    = 0   // whether to return number with "0x" prefix
	"signed"    = 1   // whether number is treated as a signed number
	"upperCase" = 0   // whether to represent alphabetic digits in upper case
RET
	"hexNumber"       // returned as string without prefix
BEGIN
	ACTION_IF ("%minDigits%" < 1) BEGIN
		OUTER_SET "minDigits" = 1
	END
	ACTION_IF ("%minDigits%" > 8) BEGIN
		OUTER_SET "minDigits" = 8
	END
	OUTER_TEXT_SPRINT ~hexNumber~ ~~
	ACTION_DEFINE_ARRAY ~digit~ BEGIN ~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~ ~a~ ~b~ ~c~ ~d~ ~e~ ~f~ END

	ACTION_IF ("%signed%" && "%value%" < 0) BEGIN
		OUTER_SET "isSigned" = 1
		OUTER_SET "value" = 0 - "%value%"
	END ELSE BEGIN
		OUTER_SET "isSigned" = 0
	END

	OUTER_WHILE ("%value%" != 0) BEGIN
		OUTER_SET "curDigit" = "%value%" BAND 0xf
		OUTER_SET "value" = "%value%" BLSR 4
		OUTER_TEXT_SPRINT ~hexDigit~ $~digit~(~%curDigit%~)
		OUTER_TEXT_SPRINT ~hexNumber~ ~%hexDigit%%hexNumber%~
	END

	OUTER_WHILE (STRING_LENGTH ~%hexNumber%~ < "%minDigits%") BEGIN
		OUTER_TEXT_SPRINT ~hexNumber~ ~0%hexNumber%~
	END

	ACTION_IF ("%upperCase%") BEGIN
		ACTION_TO_UPPER ~hexNumber~
	END

	ACTION_IF ("%prefix%") BEGIN
		OUTER_TEXT_SPRINT ~hexNumber~ ~0x%hexNumber%~
	END

	ACTION_IF ("%isSigned%") BEGIN
		OUTER_TEXT_SPRINT ~hexNumber~ ~-%hexNumber%~
	END
END

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

/**
* Adds a new entry to "MSECTYPE.2DA" with no associated string
**/

DEFINE_ACTION_FUNCTION "ADD_SILENT_SECTYPE"
STR_VAR
	"identifier" = ""
RET
	"value"
BEGIN
	// Initialize
	OUTER_SET "value" = "-1"
	// Sanity check
	ACTION_IF ("%identifier%" STRING_COMPARE_CASE "") BEGIN
		ADD_SECTYPE "%identifier%" ""
		OUTER_SET "value" = "%identifier%"
		// Replace the empty string with "No such index" (i.e., a non-existing string)
		SILENT
		COPY_EXISTING "MSECTYPE.2DA" "override"
			READ_2DA_ENTRIES_NOW "read_msectype" 0
			FOR ("i" = 4; "%i%" < "%read_msectype%"; "i" += 1) BEGIN	// Skip header rows and "None", start from "SpellProtections"
				READ_2DA_ENTRY_FORMER "read_msectype" "%i%" 0 "current_identifier"
				PATCH_IF ("%current_identifier%" STRING_EQUAL_CASE "%identifier%") BEGIN
					SET_2DA_ENTRY "%i%" 1 0 "-1"
					SET "i" = "%read_msectype%"	// Kill FOR-loop
				END
			END
			// Formatting
			PRETTY_PRINT_2DA
		BUT_ONLY_IF_IT_CHANGES
		VERBOSE
	END ELSE BEGIN
		FAIL "ADD_SILENT_SECTYPE: ~identifier~ has not been specified"
	END
END

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

/**
* Adds a new entry to a specified IDS file and returns its IDS value.
* 
* INT_VAR "minValue"       Minimum IDS value to consider. (Default: 0)
* INT_VAR "maxValue"       Maximum IDS value to consider. (Default: 255)
* INT_VAR "preferredValue" Try this IDS value first if available. (Default: unset)
* INT_VAR "hexadecimal"    Set to nonzero to add IDS value in hexadecimal notation. (Default: 0)
* STR_VAR "idsFile"        The IDS file to add the entry to. The current component will fail to install if the specified file does not exist as a game resource.
* STR_VAR "identifier"     The identifier name for the IDS value. Must not contain whitespace.
* RET "value"              The IDS value if entry has been added successfully. The current component will fail to install if entry cannot be added.
*/

DEFINE_ACTION_FUNCTION "ADD_IDS_ENTRY"
INT_VAR
	"minValue"        = 0
	"maxValue"        = 255
	"preferredValue"  = "-1"
	"hexadecimal"     = 0
STR_VAR
	"idsFile"         = ""
	"identifier"      = ""
RET
	"value"
BEGIN
	OUTER_SET "value" = "-1"

	ACTION_IF ("%minValue%" < 0) BEGIN
		OUTER_SET "minValue" = 0
	END
	ACTION_IF ("%maxValue%" < "%minValue%") BEGIN
		OUTER_SET "maxValue" = "%minValue%"
	END

	ACTION_IF (~%idsFile%~ STRING_MATCHES_REGEXP ~.+\..+~ = 0) BEGIN
		OUTER_PATCH_SAVE "idsFile" ~%idsFile%~ BEGIN
			REPLACE_TEXTUALLY ~\(.+\)\.[^.]+~ ~\1~
		END
	END

	ACTION_IF (FILE_EXISTS_IN_GAME ~%idsFile%.ids~) BEGIN
		// Try preferred value first
		OUTER_PATCH ~~ BEGIN
			PATCH_IF ("%preferredValue%" >= "%minValue%" AND "%preferredValue%" <= "%maxValue%") BEGIN
				LOOKUP_IDS_SYMBOL_OF_INT "retVal" ~%idsFile%~ "%preferredValue%"
				PATCH_IF (~%retVal%~ STRING_EQUAL ~%preferredValue%~) BEGIN
					SET "value" = "%preferredValue%"
				END
			END
		END

		// Looking for available IDS slot
		ACTION_IF ("%value%" = "-1") BEGIN
			OUTER_PATCH ~~ BEGIN
				FOR ("v" = "%minValue%"; "%v%" <= "%maxValue%"; "v" += 1) BEGIN
					LOOKUP_IDS_SYMBOL_OF_INT "retVal" ~%idsFile%~ "%v%"
					PATCH_IF (~%retVal%~ STRING_EQUAL ~%v%~) BEGIN
						SET "value" = "%v%"
						SET "v" = "%maxValue%" + 1	// Kill FOR-loop
					END
				END
			END
		END

		// Falling back to preferred value if no free slot found
		ACTION_IF ("%value%" = "-1" AND "%preferredValue%" >= "%minValue%" AND "%preferredValue%" <= "%maxValue%") BEGIN
			OUTER_SET "value" = "%preferredValue%"
		END

		// Adding new entry
		ACTION_IF ("%value%" != "-1") BEGIN
			ACTION_IF ("%hexadecimal%") BEGIN
				LAF "TO_HEX_NUMBER"
				INT_VAR
					"value"
				RET
					"hexNumber"
				END
				OUTER_TEXT_SPRINT ~idsValue~ ~0x%hexNumber%~
			END ELSE BEGIN
				OUTER_TEXT_SPRINT ~idsValue~ ~%value%~
			END

			APPEND ~%idsFile%.ids~ ~%idsValue% %identifier%~ UNLESS ~%identifier%~
			OUTER_SET "value" = IDS_OF_SYMBOL (~%idsFile%~ ~%identifier%~)
			ACTION_IF ("%value%" < "%minValue%" OR "%value%" > "%maxValue%") BEGIN
				OUTER_SET "value" = "-1"
			END
		END
	END ELSE BEGIN
		FAIL "ADD_IDS_ENTRY: the specified IDS file ~%idsFile%~ does not exist as a game resource"
	END
	// FAIL if ("%value%" == "-1")
	ACTION_IF ("%value%" == "-1") BEGIN
		FAIL "ADD_IDS_ENTRY, ~%idsFile%.ids~: there's no room for appending ~%identifier%~"
	END
END

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION "CD_NEW_PORTRAIT_ICON"
INT_VAR
	"string" = "-1"
STR_VAR
	"bam_file" = "****"
RET
	"icon"
BEGIN
	COPY_EXISTING - ~STATDESC.2da~ ~override~
		COUNT_2DA_ROWS 3 "count"
		READ_2DA_ENTRY ("%count%" - 1) 0 3 "icon"
		SET "icon" += 1
	BUT_ONLY_IF_IT_CHANGES
	APPEND ~STATDESC.2da~ ~%icon% %string% %bam_file%~
	// Prettify
	COPY_EXISTING ~STATDESC.2da~ ~override~
		PRETTY_PRINT_2DA
	BUT_ONLY_IF_IT_CHANGES
END