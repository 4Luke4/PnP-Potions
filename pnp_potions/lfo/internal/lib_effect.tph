////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//	ADD_ITEM_EFFECT_EX
//	– "duration", "savetype", "special" can now take numerical expressions
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~ADD_ITEM_EFFECT_EX~
BEGIN
	PATCH_IF (BUFFER_LENGTH > 0x71) THEN BEGIN // protects against invalid files
		READ_LONG   0x64 "abil_off" //ability offset
		READ_SHORT  0x68 "abil_num" //number of abilities
		READ_LONG   0x6a "fx_off" //effects offset
		FOR ("index1" = 0 ; "%index1%" < "%abil_num%" ; "index1" = "%index1%" + 1) BEGIN // looks for magical ability header
			READ_BYTE  ("%abil_off%" + 0x00 + ("%index1%" * 0x38)) "abil_type" //ability type
			PATCH_IF ((!(VARIABLE_IS_SET "___#type" AND IS_AN_INT "___#type") && "%abil_type%" == 3) OR (VARIABLE_IS_SET "___#type" AND IS_AN_INT "___#type" AND (("%abil_type%" == "%___#type%") OR "%___#type%" == 99))) AND (("%index1%" == ("%___#header%" - 1)) OR ("%___#header%" == 0)) BEGIN //ability is correct or unspecified and header matches
				PATCH_IF ("%___#header_target%" == BYTE_AT ("%abil_off%" + 0xC + ("%index1%" * 0x38))) OR ("%___#header_target%" < 0) BEGIN
					READ_SHORT  ("%abil_off%" + 0x1e + (0x38 * "%index1%")) "abil_fx_num"
					READ_SHORT  ("%abil_off%" + 0x20 + (0x38 * "%index1%")) "abil_fx_idx"

					SET "inserted" = !VARIABLE_IS_SET "___#insert_point" OR !IS_AN_INT "___#insert_point" OR "%___#insert_point%" < 0 OR "%___#insert_point%" > "%abil_fx_num%" ? "%abil_fx_num%" : "%___#insert_point%"

					INSERT_BYTES ("%fx_off%" + 0x00 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) 0x30

					PATCH_MATCH "%___#opcode%" WITH
						"[0-9]+" WHEN (("%___#opcode%" >= 0) AND ("%___#opcode%" <= 367)) BEGIN
							WRITE_SHORT ("%fx_off%" + 0x00 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#opcode%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~opcode~ must be an integer belonging to the interval [0,367] (you provided ~%___#opcode%~)"
					END

					//WRITE_BYTE   (fx_off + 0x02 + (0x30 * (inserted + abil_fx_idx))) ___#target
					PATCH_MATCH "%___#target%" WITH
						"[0-9]" BEGIN
							WRITE_BYTE ("%fx_off%" + 0x02 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#target%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~target~ must be an integer belonging to the interval [0,9] (you provided ~%___#target%~)"
					END

					//WRITE_BYTE   (fx_off + 0x03 + (0x30 * (inserted + abil_fx_idx))) ___#power
					PATCH_MATCH "%___#power%" WITH
						"[0-9]" BEGIN
							WRITE_BYTE ("%fx_off%" + 0x03 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#power%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~power~ must be an integer greater or equal than 0 (you provided ~%___#power%~)"
					END

					//WRITE_LONG   (fx_off + 0x04 + (0x30 * (inserted + abil_fx_idx))) ___#parameter1
					LPF "EVALUATE_EXPRESSION"
					INT_VAR
						"effect_number" = "%___#opcode%"
					STR_VAR
						"expression" = "%___#parameter1%"
					RET
						"___#parameter1" = "value"
					END
					WRITE_LONG ("%fx_off%" + 0x04 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#parameter1%"

					//WRITE_LONG   (fx_off + 0x08 + (0x30 * (inserted + abil_fx_idx))) ___#parameter2
					LPF "EVALUATE_EXPRESSION"
					INT_VAR
						"effect_number" = "%___#opcode%"
					STR_VAR
						"expression" = "%___#parameter2%"
					RET
						"___#parameter2" = "value"
					END
					WRITE_LONG ("%fx_off%" + 0x08 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#parameter2%"

					//WRITE_BYTE   (fx_off + 0x0c + (0x30 * (inserted + abil_fx_idx))) ___#timing
					PATCH_MATCH "%___#timing%" WITH
						"[0-9]" "10" "4096" BEGIN
							WRITE_BYTE ("%fx_off%" + 0x0c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#timing%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~timing~ must be an integer belonging to the interval [0,9], 10, or 4096 (you provided ~%___#timing%~)"
					END

					//WRITE_BYTE   (fx_off + 0x0d + (0x30 * (inserted + abil_fx_idx))) ___#resist_dispel
					PATCH_MATCH "%___#resist_dispel%" WITH
						"[0-3]" BEGIN
							WRITE_BYTE ("%fx_off%" + 0x0d + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#resist_dispel%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~resist_dispel~ must be an integer belonging to the interval [0,3] (you provided ~%___#resist_dispel%~)"
					END

					//WRITE_LONG   (fx_off + 0x0e + (0x30 * (inserted + abil_fx_idx))) ___#duration
					LPF "EVALUATE_EXPRESSION"
					STR_VAR
						"expression" = "%___#duration%"
					RET
						"___#duration" = "value"
					END
					WRITE_LONG ("%fx_off%" + 0x0e + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#duration%"

					//WRITE_BYTE   (fx_off + 0x12 + (0x30 * (inserted + abil_fx_idx))) ___#probability1
					PATCH_MATCH "%___#probability1%" WITH
						"[0-9]+" WHEN (("%___#probability1%" >= 0) AND ("%___#probability1%" <= 100)) BEGIN
							WRITE_BYTE ("%fx_off%" + 0x12 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#probability1%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~probability1~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability1%~)"
					END

					//WRITE_BYTE   (fx_off + 0x13 + (0x30 * (inserted + abil_fx_idx))) ___#probability2
					PATCH_MATCH "%___#probability2%" WITH
						"[0-9]+" WHEN (("%___#probability2%" >= 0) AND ("%___#probability2%" <= 100)) BEGIN
							WRITE_BYTE ("%fx_off%" + 0x13 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#probability2%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~probability2~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability2%~)"
					END

					WRITE_EVALUATED_ASCII ("%fx_off%" + 0x14 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) ~%___#resource%~ #8

					//WRITE_LONG   (fx_off + 0x1c + (0x30 * (inserted + abil_fx_idx))) ___#dicenumber
					PATCH_MATCH "%___#dicenumber%" WITH
						"[0-9]+" BEGIN
							WRITE_LONG ("%fx_off%" + 0x1c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#dicenumber%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~dicenumber~ must be an integer greater or equal than 0 (you provided ~%___#dicenumber%~)"
					END

					//WRITE_LONG   (fx_off + 0x20 + (0x30 * (inserted + abil_fx_idx))) ___#dicesize
					PATCH_MATCH "%___#dicesize%" WITH
						"[0-9]+" BEGIN
							WRITE_LONG ("%fx_off%" + 0x20 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#dicesize%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~dicesize~ must be an integer greater or equal than 0 (you provided ~%___#dicesize%~)"
					END

					//WRITE_LONG   (fx_off + 0x24 + (0x30 * (inserted + abil_fx_idx))) ___#savetype
					LPF "EVALUATE_EFFECT_SAVETYPE"
					STR_VAR
						"input" = "%___#savetype%"
					RET
						"___#savetype" = "output"
					END
					WRITE_LONG ("%fx_off%" + 0x24 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#savetype%"

					//WRITE_LONG   (fx_off + 0x28 + (0x30 * (inserted + abil_fx_idx))) ___#savebonus
					PATCH_MATCH "%___#savebonus%" WITH
						"-?[0-9]+" BEGIN
							WRITE_LONG ("%fx_off%" + 0x28 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#savebonus%"
						END
						DEFAULT
							PATCH_FAIL "~%DEST_FILE%~, ADD_ITEM_EFFECT_EX: ~savebonus~ must be a (possibly signed) integer (you provided ~%___#savebonus%~)"
					END

					LPF "EVALUATE_EXPRESSION"
					INT_VAR
						"effect_number" = "%___#opcode%"
					STR_VAR
						"expression" = "%___#special%"
					RET
						"___#special" = "value"
					END
					WRITE_LONG ("%fx_off%" + 0x2c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#special%"

					//correcting effects number
					WRITE_SHORT ("%abil_off%" + 0x1e + (0x38 * "%index1%")) ("%abil_fx_num%" + 1)

					//correcting 1st effect ___#index1es
					FOR ("index2" = 0 ; "%index2%" < "%abil_num%" ; "index2" = "%index2%" + 1) BEGIN
						READ_SHORT ("%abil_off%" + "%index2%" * 0x38 + 0x20) "1effect_index"
						PATCH_IF ("%1effect_index%" > "%abil_fx_idx%") //if next abilility
									OR (("%1effect_index%" == "%abil_fx_idx%")
									AND ("%abil_fx_num%" == 0)
									AND ("%index2%" != "%index1%")) BEGIN
							WRITE_SHORT ("%abil_off%" + "%index2%" * 0x38 + 0x20) ("%1effect_index%" + 1) //increase 1 effect index1 by 1
						END
					END
					//no offsets to correct
				END
			END
		END //end of cycle
	END
END

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//	ADD_SPELL_EFFECT_EX
//	– "parameter1", "parameter2", "duration", "savetype", "special" can now take numerical expressions
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~ADD_SPELL_EFFECT_EX~
BEGIN
	PATCH_IF (BUFFER_LENGTH > 0x71) THEN BEGIN
		READ_LONG  0x64 "abil_off"
		READ_SHORT 0x68 "abil_num"
		READ_LONG  0x6a "fx_off"

		FOR ("index1" = 0 ; "%index1%" < "%abil_num%" ; "index1" = "%index1%" + 1) BEGIN

			PATCH_IF ("%index1%" == ("%___#header%" - 1)) OR ("%___#header%" == 0) BEGIN //header=1 means index1=0
				READ_SHORT  ("%abil_off%" + 0x1e + (0x28 * "%index1%")) "abil_fx_num"
				READ_SHORT  ("%abil_off%" + 0x20 + (0x28 * "%index1%")) "abil_fx_idx"

				SET "inserted" = !VARIABLE_IS_SET "___#insert_point" OR !IS_AN_INT "___#insert_point" OR "%___#insert_point%" < 0 OR "%___#insert_point%" > "%abil_fx_num%" ? "%abil_fx_num%" : "%___#insert_point%"

				INSERT_BYTES ("%fx_off%" + 0x00 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) 0x30

				PATCH_MATCH "%___#opcode%" WITH
					"[0-9]+" WHEN (("%___#opcode%" >= 0) AND ("%___#opcode%" <= 367)) BEGIN
						WRITE_SHORT ("%fx_off%" + 0x00 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#opcode%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~opcode~ must be an integer belonging to the interval [0,367] (you provided ~%___#opcode%~)"
				END

				//WRITE_BYTE   (fx_off + 0x02 + (0x30 * (inserted + abil_fx_idx))) ___#target
				PATCH_MATCH "%___#target%" WITH
					"[0-9]" BEGIN
						WRITE_BYTE ("%fx_off%" + 0x02 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#target%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~target~ must be an integer belonging to the interval [0,9] (you provided ~%___#target%~)"
				END

				//WRITE_BYTE   (fx_off + 0x03 + (0x30 * (inserted + abil_fx_idx))) ___#power
				PATCH_MATCH "%___#power%" WITH
					"[0-9]" BEGIN
						WRITE_BYTE ("%fx_off%" + 0x03 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#power%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~power~ must be an integer greater or equal than 0 (you provided ~%___#power%~)"
				END

				//WRITE_LONG   (fx_off + 0x04 + (0x30 * (inserted + abil_fx_idx))) ___#parameter1
				LPF "EVALUATE_EXPRESSION"
				INT_VAR
					"effect_number" = "%___#opcode%"
				STR_VAR
					"expression" = "%___#parameter1%"
				RET
					"___#parameter1" = "value"
				END
				WRITE_LONG ("%fx_off%" + 0x04 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#parameter1%"

				//WRITE_LONG   (fx_off + 0x08 + (0x30 * (inserted + abil_fx_idx))) ___#parameter2
				LPF "EVALUATE_EXPRESSION"
				INT_VAR
					"effect_number" = "%___#opcode%"
				STR_VAR
					"expression" = "%___#parameter2%"
				RET
					"___#parameter2" = "value"
				END
				WRITE_LONG ("%fx_off%" + 0x08 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#parameter2%"

				//WRITE_BYTE   (fx_off + 0x0c + (0x30 * (inserted + abil_fx_idx))) ___#timing
				PATCH_MATCH "%___#timing%" WITH
					"[0-9]" "10" "4096" BEGIN
						WRITE_BYTE ("%fx_off%" + 0x0c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#timing%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~timing~ must be an integer belonging to the interval [0,9], 10, or 4096 (you provided ~%___#timing%~)"
				END

				//WRITE_BYTE   (fx_off + 0x0d + (0x30 * (inserted + abil_fx_idx))) ___#resist_dispel
				PATCH_MATCH "%___#resist_dispel%" WITH
					"[0-3]" BEGIN
						WRITE_BYTE ("%fx_off%" + 0x0d + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#resist_dispel%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~resist_dispel~ must be an integer belonging to the interval [0,3] (you provided ~%___#resist_dispel%~)"
				END

				//WRITE_LONG   (fx_off + 0x0e + (0x30 * (inserted + abil_fx_idx))) ___#duration
				LPF "EVALUATE_EXPRESSION"
				STR_VAR
					"expression" = "%___#duration%"
				RET
					"___#duration" = "value"
				END
				WRITE_LONG ("%fx_off%" + 0x0e + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#duration%"

				//WRITE_BYTE   (fx_off + 0x12 + (0x30 * (inserted + abil_fx_idx))) ___#probability1
				PATCH_MATCH "%___#probability1%" WITH
					"[0-9]+" WHEN (("%___#probability1%" >= 0) AND ("%___#probability1%" <= 100)) BEGIN
						WRITE_BYTE ("%fx_off%" + 0x12 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#probability1%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~probability1~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability1%~)"
				END

				//WRITE_BYTE   (fx_off + 0x13 + (0x30 * (inserted + abil_fx_idx))) ___#probability2
				PATCH_MATCH "%___#probability2%" WITH
					"[0-9]+" WHEN (("%___#probability2%" >= 0) AND ("%___#probability2%" <= 100)) BEGIN
						WRITE_BYTE ("%fx_off%" + 0x13 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#probability2%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~probability2~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability2%~)"
				END

				WRITE_EVALUATED_ASCII ("%fx_off%" + 0x14 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#resource%" #8

				//WRITE_LONG   (fx_off + 0x1c + (0x30 * (inserted + abil_fx_idx))) ___#dicenumber
				PATCH_MATCH "%___#dicenumber%" WITH
					"[0-9]+" BEGIN
						WRITE_LONG ("%fx_off%" + 0x1c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#dicenumber%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~dicenumber~ must be an integer greater or equal than 0 (you provided ~%___#dicenumber%~)"
				END

				//WRITE_LONG   (fx_off + 0x20 + (0x30 * (inserted + abil_fx_idx))) ___#dicesize
				PATCH_MATCH "%___#dicesize%" WITH
					"[0-9]+" BEGIN
						WRITE_LONG ("%fx_off%" + 0x20 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#dicesize%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~dicesize~ must be an integer greater or equal than 0 (you provided ~%___#dicesize%~)"
				END

				//WRITE_LONG   (fx_off + 0x24 + (0x30 * (inserted + abil_fx_idx))) ___#savetype
				LPF "EVALUATE_EFFECT_SAVETYPE"
				STR_VAR
					"input" = "%___#savetype%"
				RET
					"___#savetype" = "output"
				END
				WRITE_LONG ("%fx_off%" + 0x24 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#savetype%"

				//WRITE_LONG   (fx_off + 0x28 + (0x30 * (inserted + abil_fx_idx))) ___#savebonus
				PATCH_MATCH "%___#savebonus%" WITH
					"-?[0-9]+" BEGIN
						WRITE_LONG ("%fx_off%" + 0x28 + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#savebonus%"
					END
					DEFAULT
						PATCH_FAIL "~%DEST_FILE%~, ADD_SPELL_EFFECT_EX: ~savebonus~ must be a (possibly signed) integer (you provided ~%___#savebonus%~)"
				END

				LPF "EVALUATE_EXPRESSION"
				INT_VAR
					"effect_number" = "%___#opcode%"
				STR_VAR
					"expression" = "%___#special%"
				RET
					"___#special" = "value"
				END
				WRITE_LONG ("%fx_off%" + 0x2c + (0x30 * ("%inserted%" + "%abil_fx_idx%"))) "%___#special%"

				//correcting effects number
				WRITE_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index1%")) ("%abil_fx_num%" + 1)

				//correcting 1st effect indexes
				FOR ("index2" = 0 ; "%index2%" < "%abil_num%" ; "index2" = "%index2%" + 1) BEGIN
					READ_SHORT ("%abil_off%" + "%index2%" * 0x28 + 0x20) "1effect_index"
					PATCH_IF ("%1effect_index%" > "%abil_fx_idx%") //if abilility after current effect
								OR (("%1effect_index%" == "%abil_fx_idx%")
								AND ("%abil_fx_num%" == 0)
								AND ("%index2%" != "%index1%")) BEGIN
						WRITE_SHORT ("%abil_off%" + "%index2%" * 0x28 + 0x20) ("%1effect_index%" + 1) //increase 1 effect index1 by 1
					END
				END
				//no offsets to correct
			END // `Header` count check
		END
	END
END